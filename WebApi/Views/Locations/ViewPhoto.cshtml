@model WebApi.Models.Location

@{
    ViewBag.Title = "View Photo";
}
 <link href="~/Vendor/fileupload/css/fileinput.css" rel="stylesheet" />

<h2>Photo for <span id="LocName"> </span></h2>


<div class="panel" Style="padding: 5px;">


    <ul class="nav nav-tabs text-center">
        <li class="active">
            <a data-uri="p1" data-toggle="tab" href="#p1"><span class="glyphicon glyphicon-tasks "></span> View</a>

        </li>

    </ul>
    <div class="tab-content">

        <div id="p1" class="tab-pane active">
            <div class="panel-body">
                <div>The following images are retrived from the db</div>
         
                <div class="form-group" style="display:block;">
                  
                    <div class="col-sm-12">
                        <input type="file" readonly id="preview" name="preview[]" multiple class="file-loading" data-allowed-file-extensions='["txt", "pdf", "jpg", "png", "gif"]' />
                        
                    </div>
                </div>

            </div>

        </div>

    </div>

</div>


<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
 <script src="~/Vendor/fileupload/js/plugins/canvas-to-blob.min.js"></script>
<script src="~/Vendor/fileupload/js/plugins/sortable.js"></script>
<script src="~/Vendor/fileupload/js/plugins/purify.min.js"></script>
<script type="text/javascript" src="~/Vendor/fileupload/js/fileinput.min.js"></script>

    <script>
        var username = Cookies.get('username');
        var password = Cookies.get('password');
        var lng = "";
        var lat = "";
        var getUrlParameter = function getUrlParameter(sParam) {
            var sPageURL = decodeURIComponent(window.location.search.substring(1)),
                sURLVariables = sPageURL.split('&'),
                sParameterName,
                i;

            for (i = 0; i < sURLVariables.length; i++) {
                sParameterName = sURLVariables[i].split('=');

                if (sParameterName[0] === sParam) {
                    return sParameterName[1] === undefined ? true : sParameterName[1];
                }
            }
          };


        getLocation();
        function getLocation () {

            var LocId = getUrlParameter('locId');

            $.ajax({
                type: "GET",
                url: '/api/location/' + LocId,
                contentType: "application/json",
                beforeSend: function (xhr) {

                    xhr.setRequestHeader("Authorization", "Basic " + btoa(username + ":" + password));
                },
                success: function (data, status, xhr) {

                    $("#LocName").html(data.Name);
                    lng = data.Long;
                    lat = data.Lat;


                    $.ajax({
                        type: "GET",
                        url: '/api/location/favoriteImages/' + LocId,
                        contentType: "application/json",
                        beforeSend: function (xhr) {
                            xhr.setRequestHeader("Authorization", "Basic " + btoa(username + ":" + password));
                        },
                        success: function (data, status, xhr) {

                            DisplayImg(data);
                    
                        },
                        error: function (data, status, xhr) {

                        }
                    });
                
                    
                },
                error: function (data, status, xhr) {

                }
            });
        }
 
        function DisplayImg(data)
        {
            var configArray = data.previewconfig;
            var previewArray = data.preview;
    
        
            if(configArray == null)
                configArray="";

            if(previewArray == null)
                previewArray="";

            var $upload = $("#preview");

            $upload.fileinput({
                showUpload: false,
                showRemove: false,
                dropZoneEnabled: false,
                minFileCount: 2,
                maxFileCount: 5,
                overwriteInitial: false,
                initialPreview:
        
                    previewArray
                ,
                initialPreviewAsData: true, // identify if you are sending preview data only and not the raw markup
                initialPreviewFileType: 'image', // image is the default and can be overridden in config below
                initialPreviewConfig: 

                   configArray        
                ,
                purifyHtml: true, // this by default purifies HTML data for preview
   
            });
        }
 


    </script>
}
